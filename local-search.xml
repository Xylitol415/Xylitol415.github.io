<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MySQL基础语法</title>
    <link href="/MySQL/Base/"/>
    <url>/MySQL/Base/</url>
    
    <content type="html"><![CDATA[<h2 id="MySQL基础语法"><a href="#MySQL基础语法" class="headerlink" title="MySQL基础语法"></a>MySQL基础语法</h2><h3 id="1-SQL规范"><a href="#1-SQL规范" class="headerlink" title="1.SQL规范"></a>1.SQL规范</h3><h4 id="1-1-基本规则"><a href="#1-1-基本规则" class="headerlink" title="1.1 基本规则"></a>1.1 基本规则</h4><ul><li>SQL 可以写在一行或者多行。为了提高可读性，各子句分行写，必要时使用缩进</li><li>每条命令以 ; 或 \g 或 \G 结束</li><li>关键字不能被缩写也不能分行</li><li>关于标点符号<ul><li>必须保证所有的()、单引号、双引号是成对结束的</li><li>必须使用英文状态下的半角输入方式</li><li>字符串型和日期时间类型的数据可以使用单引号（’ ‘）表示</li><li>列的别名，尽量使用双引号（” “），而且不建议省略as</li></ul></li></ul><h4 id="1-2-SQL大小写规范"><a href="#1-2-SQL大小写规范" class="headerlink" title="1.2 SQL大小写规范"></a>1.2 SQL大小写规范</h4><ul><li><strong>MySQL在Windows环境下是大小写不敏感的</strong></li><li><strong>MySQL在Linux环境下是大小写敏感的</strong><ul><li>数据库名、表名、表的别名、变量名是严格区分大小写的</li><li>关键字、函数名、列名(或字段名)、列的别名(字段的别名) 是忽略大小写的。</li></ul></li><li><strong>推荐采用统一的书写规范：</strong><ul><li>数据库名、表名、表别名、字段名、字段别名等都小写</li><li>SQL 关键字、函数名、绑定变量等都大写</li></ul></li></ul><h4 id="1-3-注-释"><a href="#1-3-注-释" class="headerlink" title="1.3 注 释"></a>1.3 注 释</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">单行注释：#注释文字(MySQL特有的方式)<br>单行注释：<span class="hljs-comment">-- 注释文字(--后面必须包含一个空格。)</span><br>多行注释：<span class="hljs-comment">/* 注释文字 */</span><br></code></pre></div></td></tr></table></figure><h4 id="1-4-命名规则"><a href="#1-4-命名规则" class="headerlink" title="1.4 命名规则"></a>1.4 命名规则</h4><ul><li>数据库、表名不得超过30个字符，变量名限制为29个</li><li>必须只能包含 A–Z, a–z, 0–9, _共63个字符</li><li>数据库名、表名、字段名等对象名中间不要包含空格</li><li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用`（着重号）引起来</li><li>保持字段名和类型的一致性，在命名字段并为其指定数据类型的时候一定要保证一致性。假如数据类型在一个表里是整数，那在另一个表里可就别变成字符型了</li></ul><h3 id="2-基础查询"><a href="#2-基础查询" class="headerlink" title="2. 基础查询"></a>2. 基础查询</h3><h4 id="2-1-查询语句"><a href="#2-1-查询语句" class="headerlink" title="2.1 查询语句"></a>2.1 查询语句</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- SELECT ...</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>; <span class="hljs-comment">-- 没有任何子句</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span>,<span class="hljs-number">3</span> <span class="hljs-operator">*</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">FROM</span> DUAL; <span class="hljs-comment">-- dual：伪表</span><br><br><span class="hljs-comment">-- SELECT ... FROM</span><br><span class="hljs-comment">-- 查询单列</span><br><span class="hljs-keyword">SELECT</span>  column_name<br><span class="hljs-keyword">FROM</span> table_name;<br><span class="hljs-comment">-- 查询多列</span><br><span class="hljs-keyword">SELECT</span>  column_name1, column_name2, ...<br><span class="hljs-keyword">FROM</span> table_name;<br><span class="hljs-comment">-- 查询所有</span><br><span class="hljs-keyword">SELECT</span>  <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> table_name;<br></code></pre></div></td></tr></table></figure><h4 id="2-2-列的别名"><a href="#2-2-列的别名" class="headerlink" title="2.2 列的别名"></a>2.2 列的别名</h4><ul><li>重命名一个列</li><li>便于计算</li><li>紧跟列名，也可以<strong>在列名和别名之间加入关键字AS，别名使用双引号</strong>，以便在别名中包含空格或特殊的字符并区分大小写。</li><li>AS 可以省略</li><li>建议别名简短，见名知意</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> col_name1 <span class="hljs-keyword">AS</span> new_name1, col_name2, new_name2 <br><span class="hljs-keyword">FROM</span> table_name;<br><br><span class="hljs-keyword">SELECT</span> last_name &quot;Name&quot;, salary<span class="hljs-operator">*</span><span class="hljs-number">12</span> &quot;Annual Salary&quot;<br><span class="hljs-keyword">FROM</span> employees;<br></code></pre></div></td></tr></table></figure><h4 id="3-3-去重"><a href="#3-3-去重" class="headerlink" title="3.3 去重"></a>3.3 去重</h4><p><strong>在SELECT语句中使用关键字DISTINCT去除重复行</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 1.`DISTINCT`需要放到所有列名的前面</span><br><span class="hljs-comment">-- 2.`DISTINCT`是对后面所有列名的组合进行去重,如果想要看都有哪些不同的部门，只需要写`DISTINCT department_id`即可</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> department_id, salary <br><span class="hljs-keyword">FROM</span> employees;<br></code></pre></div></td></tr></table></figure><h3 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3.运算符"></a>3.运算符</h3><h4 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h4><table><thead><tr><th>运算符</th><th>名称</th><th>作用</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加法运算符</td><td>计算两个值或表达式的和</td><td>SELECT A + B</td></tr><tr><td>-</td><td>减法运算符</td><td>计算两个值或表达式的差</td><td>SELECT A - B</td></tr><tr><td>*</td><td>乘法运算符</td><td>计算两个值或表达式的乘积</td><td>SELECT A * B</td></tr><tr><td>/ 或 DIV</td><td>除法运算符</td><td>计算两个值或表达式的商</td><td>SELECT A / B 或者 SELECT A DIV B</td></tr><tr><td>% 或 MOD</td><td>求模（求余）运算符</td><td>计算两个值或表达式的余数</td><td>SELECT A % B 或者 SELECT A MOD B</td></tr></tbody></table><h4 id="3-2-比较运算符"><a href="#3-2-比较运算符" class="headerlink" title="3.2 比较运算符"></a>3.2 比较运算符</h4><table><thead><tr><th>运算符</th><th>名称</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>=</td><td>等于运算符</td><td>判断两个值、字符串或表达式是否相等</td><td>SELECT C FROM TABLE WHERE A = B</td></tr><tr><td>&lt;=&gt;</td><td>安全等于运算符</td><td>安全地判断两个值、字符串或表达式是否相等</td><td>SELECT C FROM TABLE WHERE A &lt;=&gt; B</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于运算符</td><td>判断两个值、字符串或表达式是否不相等</td><td>SELECT C FROM TABLE WHERE A &lt;&gt; B</td></tr><tr><td>&lt;</td><td>小于运算符</td><td>判断前面的值、字符串或表达式是否小于后面的值、字符串或表达式</td><td>SELECT C FROM TABLE WHERE A &lt; B</td></tr><tr><td>&lt;=</td><td>小于等于运算符</td><td>判断前面的值、字符串或表达式是否小于等于后面的值、字符串或表达式</td><td>SELECT C FROM TABLE WHERE A &lt;= B</td></tr><tr><td>&gt;</td><td>大于运算符</td><td>判断前面的值、字符串或表达式是否大于后面的值、字符串或表达式</td><td>SELECT C FROM TABLE WHERE A &gt; B</td></tr><tr><td>&gt;=</td><td>大于等于运算符</td><td>判断前面的值、字符串或表达式是否大于等于后面的值、字符串或表达式</td><td>SELECT C FROM TABLE WHERE A &gt;= B</td></tr></tbody></table><p>其他比较运算符</p><table><thead><tr><th>运算符</th><th>名称</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>IS NULL</td><td>为空运算符</td><td>判断值、字符串或表达式是否为空</td><td>SELECT B FROM TABLE WHERE A IS NULL</td></tr><tr><td>IS NOTNULL</td><td>不为空运算符</td><td>判断值、字符串或表达式是否不为空</td><td>SELECT B FROM TABLE WHERE A IS NOT NULL</td></tr><tr><td>LEAST</td><td>最小值运算符</td><td>在多个值中返回最小值</td><td>SELECT D FROM TABLE WHERE C LEAST(A, B)</td></tr><tr><td>GREATEST</td><td>最大值运算符</td><td>在多个值中返回最大值</td><td>SELECT D FROM TABLE WHERE C GREATEST(A, B)</td></tr><tr><td>BETWEEN … AND …</td><td>两值之间的运算符</td><td>判断一个值是否在两个值之间</td><td>SELECT D FROM TABLE WHERE C BETWEEN A AND B</td></tr><tr><td>ISNULL</td><td>为空运算符</td><td>判断一个值、字符串或表达式是否为空</td><td>SELECT B FROM TABLE WHERE A ISNULL</td></tr><tr><td>IN</td><td>属于运算符</td><td>判断一个值是否为列表中的任意一个值</td><td>SELECT D FROM TABLE WHERE C IN(A, B)</td></tr><tr><td>NOT IN</td><td>不属于运算符</td><td>判断一个值是否不是一个列表中的任意一个值</td><td>SELECT D FROM TABLE WHERE C NOT IN(A, B)</td></tr><tr><td>LIKE</td><td>模糊匹配运算符</td><td>判断一个值是否符合模糊匹配规则</td><td>SELECT C FROM TABLE WHERE A LIKE B</td></tr><tr><td>REGEXP</td><td>正则表达式运算符</td><td>判断一个值是否符合正则表达式的规则</td><td>SELECT C FROM TABLE WHERE A REGEXPB</td></tr><tr><td>RLIKE</td><td>正则表达式运算符</td><td>判断一个值是否符合正则表达式的规则</td><td>SELECT C FROM TABLE WHERE A RLIKEB</td></tr></tbody></table><p><strong>LIKE运算符</strong> </p><p>LIKE运算符主要用来匹配字符串，通常用于模糊匹配，如果满足条件则返回1，否则返回0。如果给定的值或者匹配条件为NULL，则返回结果为NULL。 </p><p>LIKE运算符通常使用如下通配符：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">“<span class="hljs-operator">%</span>”：匹配<span class="hljs-number">0</span>个或多个字符。<br>“_”：只能匹配一个字符。<br></code></pre></div></td></tr></table></figure><p><strong>ESCAPE</strong></p><ul><li>回避特殊符号的：<strong>使用转义符</strong>。</li><li>如果使用\表示转义，要省略ESCAPE。如果不是\，则要加上ESCAPE。</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例：查询第2个字符是_且第3个字符是&#x27;a&#x27;的员工信息</span><br><span class="hljs-comment">-- 需要使用转义字符: \ </span><br><span class="hljs-keyword">SELECT</span> last_name<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> last_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;_\_a%&#x27;</span>;<br><span class="hljs-comment">-- 或者</span><br><span class="hljs-keyword">SELECT</span> last_name<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> last_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;_$_a%&#x27;</span> <span class="hljs-keyword">ESCAPE</span> <span class="hljs-string">&#x27;$&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p><strong>REGEXP运算符</strong></p><p>REGEXP运算符用来匹配字符串，语法格式为：<code>expr REGEXP 匹配条件</code>。如果expr满足匹配条件，返回1；如果不满足，则返回0。若expr或匹配条件任意一个为NULL，则结果NULL。</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">（1）‘^’匹配以该字符后面的字符开头的字符串。<br>（2）‘$’匹配以该字符前面的字符结尾的字符串。<br>（3）‘.’匹配任何一个单字符。<br>（4）“<span class="hljs-comment">[...]</span>”匹配在方括号内的任何字符。例如，“<span class="hljs-comment">[abc]</span>”匹配“a”或“b”或“c”。为了命名字符的范围，使用一 个‘-’。“<span class="hljs-comment">[a-z]</span>”匹配任何字母，而“<span class="hljs-comment">[0-9]</span>”匹配任何数字。<br>（5）‘*’匹配零个或多个在它前面的字符。例如，“x*”匹配任何数量的‘x’字符，“<span class="hljs-comment">[0-9]</span>*”匹配任何数量的数字， 而“*”匹配任何数量的任何字符。<br></code></pre></div></td></tr></table></figure><h4 id="3-3-逻辑运算符"><a href="#3-3-逻辑运算符" class="headerlink" title="3.3 逻辑运算符"></a>3.3 逻辑运算符</h4><table><thead><tr><th>运算符</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>NOT 或 !</td><td>逻辑非</td><td>SELECT NOT A</td></tr><tr><td>AND 或 &amp;&amp;</td><td>逻辑与</td><td>SELECT A AND B</td></tr><tr><td>OR 或 ||</td><td>逻辑或</td><td>SELECT A OR B</td></tr><tr><td>XOR</td><td>逻辑异或</td><td>SELECT A XOR B</td></tr></tbody></table><h4 id="3-4-位运算符"><a href="#3-4-位运算符" class="headerlink" title="3.4 位运算符"></a>3.4 位运算符</h4><table><thead><tr><th>运算符</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与（位AND）</td><td>SELECT A &amp; B</td></tr><tr><td>|</td><td>按位或（位OR）</td><td>SELECT A | B</td></tr><tr><td>^</td><td>按位异或（为XOR）</td><td>SELECT A ^ B</td></tr><tr><td>~</td><td>按位取反</td><td>SELECT  ~A</td></tr><tr><td>&gt;&gt;</td><td>按位右移</td><td>SELECT  A &gt;&gt; 2</td></tr><tr><td>&lt;&lt;</td><td>按位左移</td><td>SELECT  B &lt;&lt; 2</td></tr></tbody></table><h3 id="4-排序与分页"><a href="#4-排序与分页" class="headerlink" title="4.排序与分页"></a>4.排序与分页</h3><h4 id="4-1-排序数据"><a href="#4-1-排序数据" class="headerlink" title="4.1 排序数据"></a>4.1 排序数据</h4><h5 id="排序规则"><a href="#排序规则" class="headerlink" title="排序规则"></a><strong>排序规则</strong></h5><ul><li>使用 ORDER BY 子句排序<ul><li><strong>ASC（ascend）:升序</strong></li><li><strong>DESC（descend）:降序</strong></li></ul></li><li><strong>ORDER BY子句在SELECT语句的结尾。</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 单列排序</span><br><span class="hljs-comment">-- 如果在ORDER BY 后没有显式指名排序的方式的话，则默认按照升序排列</span><br><span class="hljs-keyword">SELECT</span> col_name1, col_name2, col_name3,...<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> col_name4; <br><span class="hljs-comment">-- 可以使用列的别名，进行排序</span><br><span class="hljs-keyword">SELECT</span> col_name1, col_name2 new_col_name2<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> new_col_name2;<br><span class="hljs-comment">-- 多列排序</span><br><span class="hljs-keyword">SELECT</span> col_name1, col_name2, col_name3,...<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> col_name1 <span class="hljs-keyword">DESC</span>, col_name2 <span class="hljs-keyword">ASC</span>;<br></code></pre></div></td></tr></table></figure><ul><li>可以使用不在SELECT列表中的列排序。</li><li>在对多列进行排序的时候，首先排序的第一列必须有相同的列值，才会对第二列进行排序。如果第一列数据中所有值都是唯一的，将不再对第二列进行排序。</li></ul><h4 id="4-2-分页"><a href="#4-2-分页" class="headerlink" title="4.2 分页"></a>4.2 分页</h4><h5 id="实现规则"><a href="#实现规则" class="headerlink" title="实现规则"></a><strong>实现规则</strong></h5><ul><li><strong>MySQL中使用LIMIT实现分页</strong></li><li>格式：</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">LIMIT [位置偏移量,] 行数<br></code></pre></div></td></tr></table></figure><ul><li>“偏移量”参数指示MySQL从哪一行开始显示，是一个可选参数，如果不指定“位置偏移量”，将会从表中的第一条记录开始（第一条记录的位置偏移量是0，第二条记录的位置偏移量是1，以此类推）；第二个参数“行数”指示返回的记录条数。</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 前10条记录： </span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> table_name LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">10</span>; <br>或者<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> table_name LIMIT <span class="hljs-number">10</span>;<br><span class="hljs-comment">-- 第11至20条记录： </span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> table_name LIMIT <span class="hljs-number">10</span>,<span class="hljs-number">10</span>;<br><span class="hljs-comment">-- 第21至30条记录： </span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> table_name LIMIT <span class="hljs-number">20</span>,<span class="hljs-number">10</span>;<br></code></pre></div></td></tr></table></figure><blockquote><p>MySQL 8.0中可以使用“LIMIT 3 OFFSET 4”，意思是获取从第5条记录开始后面的3条记录，和“LIMIT 4,3;”返回的结果相同。</p></blockquote><ul><li>分页显式公式：<strong>（当前页数-1）*每页条数，每页条数</strong></li><li><strong>注意：LIMIT子句必须放在整个SELECT语句的最后！</strong></li></ul><h3 id="5-多表查询"><a href="#5-多表查询" class="headerlink" title="5.多表查询"></a>5.多表查询</h3><h4 id="5-1-笛卡尔积（交叉连接）"><a href="#5-1-笛卡尔积（交叉连接）" class="headerlink" title="5.1 笛卡尔积（交叉连接）"></a>5.1 笛卡尔积（交叉连接）</h4><p>SQL92中，笛卡尔积也称为<code>交叉连接</code>，英文是<code>CROSS JOIN</code>。在 SQL99 中也是使用 CROSS JOIN表示交叉连接。它的作用就是可以把任意表进行连接，即使这两张表不相关。在MySQL中如下情况会出现笛卡尔积：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">#查询员工姓名和所在部门名称 <br><span class="hljs-keyword">SELECT</span> last_name,department_name <span class="hljs-keyword">FROM</span> employees,departments;<br><span class="hljs-keyword">SELECT</span> last_name,department_name <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">CROSS</span> <span class="hljs-keyword">JOIN</span> departments;<br><span class="hljs-keyword">SELECT</span> last_name,department_name <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments;<br><span class="hljs-keyword">SELECT</span> last_name,department_name <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">JOIN</span> departments;<br></code></pre></div></td></tr></table></figure><p>为了避免笛卡尔积， 可以<strong>在WHERE加入有效的连接条件。</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> table1.column, table2.column<br><span class="hljs-keyword">FROM</span> table1, table2<br><span class="hljs-keyword">WHERE</span> table1.column1 <span class="hljs-operator">=</span> table2.column2; #连接条件<br></code></pre></div></td></tr></table></figure><p>在表中有相同列时，在列名之前加上表名前缀。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">#案例：查询员工的姓名及其部门名称<br><span class="hljs-keyword">SELECT</span> last_name, department_name<br><span class="hljs-keyword">FROM</span> employees e, departments d<br><span class="hljs-keyword">WHERE</span> e.department_id <span class="hljs-operator">=</span> d.department_id;<br></code></pre></div></td></tr></table></figure><h4 id="5-2-多表查询"><a href="#5-2-多表查询" class="headerlink" title="5.2 多表查询"></a>5.2 多表查询</h4><h5 id="5-2-1-等值连接vs非等值连接"><a href="#5-2-1-等值连接vs非等值连接" class="headerlink" title="5.2.1 等值连接vs非等值连接"></a>5.2.1 等值连接vs非等值连接</h5><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 等值连接 </span><br><span class="hljs-comment">-- 多个表中有相同列时，必须在列名之前加上表名前缀。</span><br><span class="hljs-comment">-- 使用别名可以简化查询, 列名前使用表名前缀可以提高查询效率。</span><br><span class="hljs-comment">-- 连接n个表,至少需要n-1个连接条件</span><br><span class="hljs-keyword">SELECT</span> e.employee_id, e.last_name, e.department_id,<br>d.department_id, d.location_id<br><span class="hljs-keyword">FROM</span> employees e , departments d<br><span class="hljs-keyword">WHERE</span> e.department_id <span class="hljs-operator">=</span> d.department_id;<br><br><span class="hljs-comment">-- 非等值连接的例子</span><br><span class="hljs-comment">-- 求employees表中的列工资在job_grades表中最高工资与最低工资之间的工资等级</span><br><span class="hljs-keyword">SELECT</span> e.last_name,e.salary,j.grade_level<br><span class="hljs-keyword">FROM</span> employees e,job_grades j<br><span class="hljs-comment">-- where e.`salary` between j.`lowest_sal` and j.`highest_sal`;</span><br><span class="hljs-keyword">WHERE</span> e.`salary` <span class="hljs-operator">&gt;=</span> j.`lowest_sal` <span class="hljs-keyword">AND</span> e.`salary` <span class="hljs-operator">&lt;=</span> j.`highest_sal`;<br></code></pre></div></td></tr></table></figure><h5 id="5-2-2-自连接vs非自连接"><a href="#5-2-2-自连接vs非自连接" class="headerlink" title="5.2.2 自连接vs非自连接"></a>5.2.2 自连接vs非自连接</h5><ul><li>当table1和table2本质上是同一张表，只是用取别名的方式虚拟成两张表以代表不同的意义。然后两<br>个表再进行内连接，外连接等查询。</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 自连接的例子：查询employees表，返回“Xxx works for Xxx”</span><br><span class="hljs-comment">-- CONCAT() mysql中连接字符串的函数</span><br><span class="hljs-keyword">SELECT</span> CONCAT(worker.last_name ,<span class="hljs-string">&#x27; works for &#x27;</span><br>, manager.last_name)<br><span class="hljs-keyword">FROM</span> employees worker, employees manager<br><span class="hljs-keyword">WHERE</span> worker.manager_id <span class="hljs-operator">=</span> manager.employee_id ;<br></code></pre></div></td></tr></table></figure><h5 id="5-2-3-内连接-vs-外连接"><a href="#5-2-3-内连接-vs-外连接" class="headerlink" title="5.2.3 内连接  vs  外连接"></a>5.2.3 内连接  vs  外连接</h5><ul><li><p>内连接: 合并具有同一列的两个以上的表的行, <strong>结果集中不包含一个表与另一个表不匹配的行</strong></p></li><li><p>外连接: 两个表在连接过程中除了返回满足连接条件的行以外<strong>还返回左（或右）表中不满足条件的行 ，这种连接称为左（或右） 外连接</strong>。没有匹配的行时, 结果表中相应的列为空(NULL)。</p><ul><li>如果是左外连接，则连接条件中左边的表也称为<code>主表</code>，右边的表称为<code>从表</code>。</li><li>如果是右外连接，则连接条件中右边的表也称为<code>主表</code>，左边的表称为<code>从表</code>。 </li></ul></li></ul><h4 id="5-3-SQL99-语法实现多表查询"><a href="#5-3-SQL99-语法实现多表查询" class="headerlink" title="5.3 SQL99 语法实现多表查询"></a>5.3 SQL99 语法实现多表查询</h4><h5 id="5-3-1-基本语法"><a href="#5-3-1-基本语法" class="headerlink" title="5.3.1 基本语法"></a>5.3.1 基本语法</h5><ul><li>使用JOIN…ON子句创建连接的语法结构：</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> table1.column, table2.column, table3.column<br><span class="hljs-keyword">FROM</span> table1 <span class="hljs-keyword">JOIN</span> table2<br><span class="hljs-keyword">ON</span> table1 和 table2 的连接条件<br><span class="hljs-keyword">JOIN</span> table3<br><span class="hljs-keyword">ON</span> table2 和 table3 的连接条件<br></code></pre></div></td></tr></table></figure><h5 id="5-3-2-内连接-INNER-JOIN-的实现"><a href="#5-3-2-内连接-INNER-JOIN-的实现" class="headerlink" title="5.3.2 内连接(INNER JOIN)的实现"></a>5.3.2 内连接(INNER JOIN)的实现</h5><ul><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表<br><span class="hljs-keyword">FROM</span> A表 <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> B表<br><span class="hljs-keyword">ON</span> 关联条件<br><span class="hljs-keyword">WHERE</span> 等其他子句;<br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> last_name, department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">ON</span> e.`department_id` <span class="hljs-operator">=</span> d.`department_id`;<br></code></pre></div></td></tr></table></figure><h5 id="3-3-外连接-OUTER-JOIN-的实现"><a href="#3-3-外连接-OUTER-JOIN-的实现" class="headerlink" title="3.3 外连接(OUTER JOIN)的实现"></a><strong>3.3</strong> <strong>外连接(OUTER JOIN)的实现</strong></h5><h6 id="3-3-1-左外连接-LEFT-OUTER-JOIN"><a href="#3-3-1-左外连接-LEFT-OUTER-JOIN" class="headerlink" title="3.3.1 左外连接(LEFT OUTER JOIN)"></a>3.3.1 左外连接(LEFT OUTER JOIN)</h6><ul><li>语法：</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表<br><span class="hljs-keyword">FROM</span> A表 <span class="hljs-keyword">LEFT</span> [<span class="hljs-keyword">OUTER</span>] <span class="hljs-keyword">JOIN</span> B表<br><span class="hljs-keyword">ON</span> 关联条件<br><span class="hljs-keyword">WHERE</span> 等其他子句;<br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> last_name,department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">LEFT</span> [<span class="hljs-keyword">OUTER</span>] <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">ON</span> e.`department_id` <span class="hljs-operator">=</span> d.`department_id`;<br></code></pre></div></td></tr></table></figure><h6 id="3-3-2-右外连接-RIGHT-OUTER-JOIN"><a href="#3-3-2-右外连接-RIGHT-OUTER-JOIN" class="headerlink" title="3.3.2 右外连接(RIGHT OUTER JOIN)"></a>3.3.2 右外连接(RIGHT OUTER JOIN)</h6><ul><li>语法：</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <br><span class="hljs-keyword">FROM</span> A表 <span class="hljs-keyword">RIGHT</span> [<span class="hljs-keyword">OUTER</span>] <span class="hljs-keyword">JOIN</span> B表<br><span class="hljs-keyword">ON</span> 关联条件<br><span class="hljs-keyword">WHERE</span> 等其他子句;<br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> last_name,department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">RIGHT</span> [<span class="hljs-keyword">OUTER</span>] <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">ON</span> e.`department_id` <span class="hljs-operator">=</span> d.`department_id`;<br></code></pre></div></td></tr></table></figure><h6 id="3-3-3-满外连接-FULL-OUTER-JOIN"><a href="#3-3-3-满外连接-FULL-OUTER-JOIN" class="headerlink" title="3.3.3 满外连接(FULL OUTER JOIN)"></a>3.3.3 满外连接(FULL OUTER JOIN)</h6><ul><li>满外连接的结果 = 左右表匹配的数据 + 左表没有匹配到的数据 + 右表没有匹配到的数据。</li><li>SQL99是支持满外连接的。使用FULL JOIN 或 FULL OUTER JOIN来实现。</li><li>MySQL不支持FULL JOIN，但是可以用 LEFT JOIN UNION RIGHT JOIN代替。</li><li>LEFT JOIN 和 RIGHT JOIN 只存在于 SQL99 及以后的标准中，在 SQL92 中不存在，<br>只能用 (+) 表示。</li></ul><h4 id="5-4-UNION的使用"><a href="#5-4-UNION的使用" class="headerlink" title="5.4. UNION的使用"></a>5.4. UNION的使用</h4><p><strong>合并查询结果</strong>利用UNION关键字，可以给出多条SELECT语句，并将它们的结果组合成单个结果集。合并<br>时，两个表对应的列数和数据类型必须相同，并且相互对应。各个SELECT语句之间使用UNION或UNION<br>ALL关键字分隔。</p><p>语法格式</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">column</span>,... <span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">UNION</span> [<span class="hljs-keyword">ALL</span>]<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">column</span>,... <span class="hljs-keyword">FROM</span> table2<br></code></pre></div></td></tr></table></figure><p><strong>UNION操作符</strong></p><p>UNION 操作符返回两个查询的结果集的并集，去除重复记录。</p><p><strong>UNION ALL操作符</strong></p><p>UNION ALL操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，不去重。</p><blockquote><p>执行UNION ALL语句时所需要的资源比UNION语句少。如果明确知道合并数据后的结果数据不存在重复数据，或者不需要去除重复的数据，则尽量使用UNION ALL语句，以提高数据查询的效率。</p></blockquote><h4 id="5-5-7种SQL-JOINS的实现"><a href="#5-5-7种SQL-JOINS的实现" class="headerlink" title="5.5 7种SQL JOINS的实现"></a>5.5 7种SQL JOINS的实现</h4><h5 id="5-5-1-举例"><a href="#5-5-1-举例" class="headerlink" title="5.5.1 举例"></a>5.5.1 举例</h5><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 中图：内连接<br><span class="hljs-keyword">SELECT</span> employee_id,department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">ON</span> e.`department_id` <span class="hljs-operator">=</span> d.`department_id`;<br># 左上图：左外连接<br><span class="hljs-keyword">SELECT</span> employee_id,department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">ON</span> e.`department_id` <span class="hljs-operator">=</span> d.`department_id`;<br># 右上图：右外连接<br><span class="hljs-keyword">SELECT</span> employee_id,department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">ON</span> e.`department_id` <span class="hljs-operator">=</span> d.`department_id`;<br># 左中图：<br><span class="hljs-keyword">SELECT</span> employee_id,department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">ON</span> e.`department_id` <span class="hljs-operator">=</span> d.`department_id`<br><span class="hljs-keyword">WHERE</span> d.`department_id` <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br># 右中图：<br><span class="hljs-keyword">SELECT</span> employee_id,department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">ON</span> e.`department_id` <span class="hljs-operator">=</span> d.`department_id`<br><span class="hljs-keyword">WHERE</span> e.`department_id` <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br># 左下图：满外连接<br># 方式<span class="hljs-number">1</span>：左上图 <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span> 右中图<br><span class="hljs-keyword">SELECT</span> employee_id,department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">ON</span> e.`department_id` <span class="hljs-operator">=</span> d.`department_id`<br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span> employee_id,department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">ON</span> e.`department_id` <span class="hljs-operator">=</span> d.`department_id`<br><span class="hljs-keyword">WHERE</span> e.`department_id` <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br># 方式<span class="hljs-number">2</span>：左中图 <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span> 右上图<br><span class="hljs-keyword">SELECT</span> employee_id,department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">ON</span> e.`department_id` <span class="hljs-operator">=</span> d.`department_id`<br><span class="hljs-keyword">WHERE</span> d.`department_id` <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span> employee_id,department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">ON</span> e.`department_id` <span class="hljs-operator">=</span> d.`department_id`;<br># 右下图：左中图  <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span> 右中图<br><span class="hljs-keyword">SELECT</span> employee_id,department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">ON</span> e.`department_id` <span class="hljs-operator">=</span> d.`department_id`<br><span class="hljs-keyword">WHERE</span> d.`department_id` <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span> employee_id,department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">ON</span> e.`department_id` <span class="hljs-operator">=</span> d.`department_id`<br><span class="hljs-keyword">WHERE</span> e.`department_id` <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></div></td></tr></table></figure><h5 id="5-5-2-语法格式小结"><a href="#5-5-2-语法格式小结" class="headerlink" title="5.5.2 语法格式小结"></a>5.5.2 语法格式小结</h5><ul><li>左中图</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">#实现A <span class="hljs-operator">-</span> A∩B<br><span class="hljs-keyword">select</span> 字段列表<br><span class="hljs-keyword">from</span> A表 <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> B表<br><span class="hljs-keyword">on</span> 关联条件<br><span class="hljs-keyword">where</span> 从表关联字段 <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> 等其他子句;<br></code></pre></div></td></tr></table></figure><ul><li>右中图</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">#实现B <span class="hljs-operator">-</span> A∩B<br><span class="hljs-keyword">select</span> 字段列表<br><span class="hljs-keyword">from</span> A表 <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> B表<br><span class="hljs-keyword">on</span> 关联条件<br><span class="hljs-keyword">where</span> 从表关联字段 <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> 等其他子句;<br></code></pre></div></td></tr></table></figure><ul><li>左下图</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">#实现查询结果是A∪B<br>#用左外的A，<span class="hljs-keyword">union</span> 右外的B<br><span class="hljs-keyword">select</span> 字段列表<br><span class="hljs-keyword">from</span> A表 <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> B表<br><span class="hljs-keyword">on</span> 关联条件<br><span class="hljs-keyword">where</span> 等其他子句<br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> 字段列表<br><span class="hljs-keyword">from</span> A表 <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> B表<br><span class="hljs-keyword">on</span> 关联条件<br><span class="hljs-keyword">where</span> 等其他子句;<br></code></pre></div></td></tr></table></figure><ul><li>右下图</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">#实现A∪B <span class="hljs-operator">-</span> A∩B 或 (A <span class="hljs-operator">-</span> A∩B) ∪ （B <span class="hljs-operator">-</span> A∩B）<br>#使用左外的 (A <span class="hljs-operator">-</span> A∩B) <span class="hljs-keyword">union</span> 右外的（B <span class="hljs-operator">-</span> A∩B）<br><span class="hljs-keyword">select</span> 字段列表<br><span class="hljs-keyword">from</span> A表 <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> B表<br><span class="hljs-keyword">on</span> 关联条件<br><span class="hljs-keyword">where</span> 从表关联字段 <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> 等其他子句<br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> 字段列表<br><span class="hljs-keyword">from</span> A表 <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> B表<br><span class="hljs-keyword">on</span> 关联条件<br><span class="hljs-keyword">where</span> 从表关联字段 <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> 等其他子句<br></code></pre></div></td></tr></table></figure><h4 id="5-6-SQL99语法新特性"><a href="#5-6-SQL99语法新特性" class="headerlink" title="5.6. SQL99语法新特性"></a>5.6. SQL99语法新特性</h4><h5 id="5-6-1-自然连接"><a href="#5-6-1-自然连接" class="headerlink" title="5.6.1 自然连接"></a>5.6.1 自然连接</h5><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> employee_id,last_name,department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">ON</span> e.`department_id` <span class="hljs-operator">=</span> d.`department_id`<br><span class="hljs-keyword">AND</span> e.`manager_id` <span class="hljs-operator">=</span> d.`manager_id`;<br># <span class="hljs-keyword">NATURAL</span> <span class="hljs-keyword">JOIN</span> : 它会帮你自动查询两张连接表中`所有相同的字段`，然后进行`等值连接`。<br><span class="hljs-keyword">SELECT</span> employee_id,last_name,department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">NATURAL</span> <span class="hljs-keyword">JOIN</span> departments d;<br></code></pre></div></td></tr></table></figure><h5 id="5-6-2-USING连接"><a href="#5-6-2-USING连接" class="headerlink" title="5.6.2 USING连接"></a>5.6.2 USING连接</h5><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> employee_id,last_name,department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">ON</span> e.department_id <span class="hljs-operator">=</span> d.department_id;<br># 指定数据表里的同名字段进行等值连接，只能配合<span class="hljs-keyword">JOIN</span>一起使用。<br><span class="hljs-keyword">SELECT</span> employee_id,last_name,department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">USING</span> (department_id);<br></code></pre></div></td></tr></table></figure><blockquote><p>【强制】超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致；多表关联查询时，保证被关联的字段需要有索引。</p><p>说明：即使双表 join 也要注意表索引、SQL 性能。</p></blockquote><h4 id="5-7-小结"><a href="#5-7-小结" class="headerlink" title="5.7 小结"></a>5.7 小结</h4><p>表连接的约束条件可以有三种方式：WHERE, ON, USING</p><ul><li>WHERE：适用于所有关联查询</li><li>ON ：只能和JOIN一起使用，只能写关联条件。虽然关联条件可以并到WHERE中和其他条件一起<br>写，但分开写可读性更好。</li><li>USING：只能和JOIN一起使用，而且要求两个关联字段在关联表中名称一致，而且只能表示关联字<br>段值相等</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 关联条件</span><br><span class="hljs-comment">-- 把关联条件写在where后面</span><br><span class="hljs-keyword">SELECT</span> last_name,department_name<br><span class="hljs-keyword">FROM</span> employees,departments<br><span class="hljs-keyword">WHERE</span> employees.department_id <span class="hljs-operator">=</span> departments.department_id;<br><span class="hljs-comment">-- 把关联条件写在on后面，只能和JOIN一起使用</span><br><span class="hljs-keyword">SELECT</span> last_name,department_name<br><span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments<br><span class="hljs-keyword">ON</span> employees.department_id <span class="hljs-operator">=</span> departments.department_id;<br><span class="hljs-keyword">SELECT</span> last_name,department_name<br><span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">CROSS</span> <span class="hljs-keyword">JOIN</span> departments<br><span class="hljs-keyword">ON</span> employees.department_id <span class="hljs-operator">=</span> departments.department_id;<br><span class="hljs-keyword">SELECT</span> last_name,department_name<br><span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">JOIN</span> departments<br><span class="hljs-keyword">ON</span> employees.department_id <span class="hljs-operator">=</span> departments.department_id;<br><span class="hljs-comment">-- 把关联字段写在using()中，只能和JOIN一起使用</span><br><span class="hljs-comment">-- 而且两个表中的关联字段必须名称相同，而且只能表示=</span><br><span class="hljs-comment">-- 查询员工姓名与基本工资</span><br><span class="hljs-keyword">SELECT</span> last_name,job_title<br><span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> jobs <span class="hljs-keyword">USING</span>(job_id);<br><span class="hljs-comment">-- n张表关联，需要n-1个关联条件</span><br><span class="hljs-comment">-- 查询员工姓名，基本工资，部门名称</span><br><span class="hljs-keyword">SELECT</span> last_name,job_title,department_name <span class="hljs-keyword">FROM</span> employees,departments,jobs<br><span class="hljs-keyword">WHERE</span> employees.department_id <span class="hljs-operator">=</span> departments.department_id<br><span class="hljs-keyword">AND</span> employees.job_id <span class="hljs-operator">=</span> jobs.job_id;<br><span class="hljs-keyword">SELECT</span> last_name,job_title,department_name<br><span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> jobs<br><span class="hljs-keyword">ON</span> employees.department_id <span class="hljs-operator">=</span> departments.department_id<br><span class="hljs-keyword">AND</span> employees.job_id <span class="hljs-operator">=</span> jobs.job_id;<br></code></pre></div></td></tr></table></figure><blockquote><p>注意：我们要控制连接表的数量。多表连接就相当于嵌套 for 循环一样，非常消耗资源，会让 SQL 查询性能下降得很严重，因此不要连接不必要的表。在许多 DBMS 中，也都会有最大连接表的限制。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图论</title>
    <link href="/Algorithm/Graph/"/>
    <url>/Algorithm/Graph/</url>
    
    <content type="html"><![CDATA[<h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="java实现c-中的Pair类"><a href="#java实现c-中的Pair类" class="headerlink" title="java实现c++中的Pair类"></a>java实现c++中的Pair类</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PII</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;PII&gt;&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> first;<span class="hljs-comment">//距离值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> second;<span class="hljs-comment">//点编号</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getFirst</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.first;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSecond</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.second;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PII</span><span class="hljs-params">(<span class="hljs-type">int</span> first,<span class="hljs-type">int</span> second)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.first = first;<br>        <span class="hljs-built_in">this</span>.second = second;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(PII o)</span> &#123;<br>        <span class="hljs-keyword">return</span> Integer.compare(first, o.first);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="树与图的存储"><a href="#树与图的存储" class="headerlink" title="树与图的存储"></a>树与图的存储</h3><p>树是一种特殊的图，与图的存储方式相同。<br>对于无向图中的边<code>ab</code>，存储两条有向边<code>a-&gt;b</code>,<code> b-&gt;a</code>。<br>因此我们可以只考虑有向图的存储。</p><p>(1) 邻接矩阵：<code>g[a][b]</code>存储边<code>a-&gt;b</code></p><p>(2) 邻接表（链式前向星）：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// N是节点最大数量，看题目所给范围；M=2*N：无向图边数开节点数2倍空间，有向图可开N</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">10010</span>, M = <span class="hljs-number">2</span> * N;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] h = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N], e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[M], w = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[M], ne = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[M];<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 加边，不带权</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-comment">// 加边函数，带权</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> &#123;<br>    e[idx] = b;<br>    w[idx] = c;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-comment">// 重要步骤，一定要在main()中初始化h[]为-1，表示每个节点当前为空链表</span><br>idx = <span class="hljs-number">0</span>;<br>Arrays.fill(h, -<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 遍历邻接表：节点u的所有邻边</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> h[u]; i != -<span class="hljs-number">1</span>; i = ne[i]) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> e[i]; <span class="hljs-comment">// j是u的一个邻边</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> w[i]; <span class="hljs-comment">// k是u-&gt;j的边权值</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="树与图的遍历"><a href="#树与图的遍历" class="headerlink" title="树与图的遍历"></a>树与图的遍历</h3><p><strong>时间复杂度 O(n+m), n 表示点数，m 表示边数</strong></p><p>(1)深度优先遍历</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span><br>&#123;<br>    st[u] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// st[u] 表示点u已经被遍历过</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> h[u]; i != -<span class="hljs-number">1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> e[i];<br>        <span class="hljs-keyword">if</span> (!st[j]) dfs(j);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>(2)宽度优先遍历</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 方式1：LinkedList集合实现队列</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bfs</span><span class="hljs-params">()</span> &#123;<br>    Queue&lt;Integer&gt; q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    st[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<span class="hljs-comment">// 表示1号点已经被遍历过</span><br>    q.offer(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">while</span>(!q.isEmpty()) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> queue.poll();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> h[t]; i != -<span class="hljs-number">1</span>; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> e[i];<br>            <span class="hljs-keyword">if</span> (!st[j]) &#123;<br>                st[j] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 表示点j已经被遍历过</span><br>                q.offer(j);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 方式2：数组模拟队列</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> hh, tt;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">bfs</span><span class="hljs-params">()</span> &#123;<br>    hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br>    q[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<span class="hljs-comment">// 入队</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; d.length; i++) &#123;<br>        d[i] = -<span class="hljs-number">1</span>;<br>    &#125;<br>    d[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (hh &lt;= tt) &#123;<span class="hljs-comment">// 判断对列是否为空</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> q[hh++]; <span class="hljs-comment">// 出队</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> h[t]; i != -<span class="hljs-number">1</span>; i = ne[i]) &#123;<span class="hljs-comment">// 遍历图中节点u的所有邻边</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> e[i];<br>            <span class="hljs-keyword">if</span> (d[j] == -<span class="hljs-number">1</span>) &#123;<br>                d[j] = d[t] + <span class="hljs-number">1</span>;<br>                q[++tt] = j;<span class="hljs-comment">// 入队</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> d[n];<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p>算法步骤：</p><ul><li>使用<code>d[N]</code>记录每个点的入度</li><li>第一步，将所有入度为<code>0</code>的点入队</li><li>第二步，循环判断队列是否为空，队列非空时，取出队头元素，将队头元素的邻边入度减<code>1</code>，如果为<code>0</code>，就将该邻点入队</li><li>第三步，按照出队顺序，即可输出拓扑排序的结果，如果出队元素数量小于结点总数，则拓扑序列不存在</li><li>拓扑排序结果不唯一</li><li>由于采用数组模拟队列，出队的元素仍按顺序保留在数组中，因此可直接输出整个数组得到拓扑序列</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N]; <span class="hljs-comment">// 记录入度</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N]; <span class="hljs-comment">// 数组模拟队列</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> hh, tt;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">topsort</span><span class="hljs-params">()</span>&#123;<br>    hh = <span class="hljs-number">0</span> ; tt = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> ; i &lt;= n ; i ++ )&#123; <br>        <span class="hljs-keyword">if</span>(d[i] == <span class="hljs-number">0</span>)&#123;<br>            q[++tt] = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(hh &lt;= tt)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> q[hh++]; <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> h[t] ; i != -<span class="hljs-number">1</span>; i = ne[i])&#123; <br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> e[i];<br>            d[j] -- ;<br>            <span class="hljs-keyword">if</span>(d[j] == <span class="hljs-number">0</span>)&#123;<br>                q[++tt] = j;<br>            &#125;       <br>        &#125;<br>    &#125;<br>    <span class="hljs-type">return</span> <span class="hljs-variable">tt</span> <span class="hljs-operator">=</span>= n - <span class="hljs-number">1</span>;  <span class="hljs-comment">// 如果所有点都入队了，说明存在拓扑序列，否则不存在拓扑序列</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="最短路问题"><a href="#最短路问题" class="headerlink" title="最短路问题"></a>最短路问题</h3><h4 id="朴素Dijkstra算法"><a href="#朴素Dijkstra算法" class="headerlink" title="朴素Dijkstra算法"></a>朴素Dijkstra算法</h4><p>适用于稠密图，时间复杂度<code>O(n^2)</code></p><p>图的存储：邻接矩阵</p><p>算法步骤：</p><ol><li>将<code>dist[i]</code>初始化为正无穷，起点的<code>dist</code>设置为0，同时，用集合<code>st</code>标记已经确定最短路的节点</li><li>迭代n次，每次先找出当前没有确定最短路的点（即<code>st[i]</code>为<code>false</code>）中距离起点最近（<code>dist[]</code>最小）的点，记为<code>t</code></li><li>随后，将<code>t</code>节点加入<code>st</code>集合中，并用它来更新别的点到起点的最短距离。</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">510</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N][N];<span class="hljs-comment">// 存储每条边</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] dist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<span class="hljs-comment">// 存储1号点到每个点的最短距离</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span>[] st = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">INF</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//设置无穷大</span><br>    <span class="hljs-comment">// 求1号点到n号点的最短路，如果不存在则返回-1</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dijkstra</span><span class="hljs-params">()</span><br>    &#123;<br>        Arrays.fill(dist, INF);<br>        dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; n;i++)<br>        &#123;<br>            <span class="hljs-comment">//1、找到当前未标记过且离源点最近的点</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt;= n;j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!st[j] &amp;&amp; (t == -<span class="hljs-number">1</span> || dist[t] &gt; dist[j]))<br>                    t = j;<br>            &#125;<br>            <span class="hljs-comment">//2、标记该点已经确定最短距离</span><br>            st[t] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-comment">//3、用该点更新其他点的距离</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt;= n;j++)<br>            &#123;<br>                dist[j] = Math.min(dist[j], dist[t] + g[t][j]);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(dist[n] == INF) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> dist[n];<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>        String[] str1 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>        n = Integer.parseInt(str1[<span class="hljs-number">0</span>]);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> Integer.parseInt(str1[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++ )<br>             Arrays.fill(g[i], INF);<br>        <span class="hljs-keyword">while</span>(m -- &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            String[] str2 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> Integer.parseInt(str2[<span class="hljs-number">0</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Integer.parseInt(str2[<span class="hljs-number">1</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Integer.parseInt(str2[<span class="hljs-number">2</span>]);<br>            g[a][b] = Math.min(g[a][b], c);<span class="hljs-comment">//若有重边，选择最短的</span><br>        &#125;<br>        System.out.println(dijkstra());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="堆优化的Dijkstra算法"><a href="#堆优化的Dijkstra算法" class="headerlink" title="堆优化的Dijkstra算法"></a>堆优化的Dijkstra算法</h4><p>适用于稀疏图，时间复杂度<code>O(mlogn)</code>，是对朴素版的改进：找当前未加入<code>st</code>集合的点的最短距离的时候，取得堆顶而不是遍历数组查找。</p><p>图的存储：邻接表</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// PII(pair&lt;int,int&gt;)的定义见前文</span><br><br><span class="hljs-comment">// 求1号点到n号点的最短路，如果不存在则返回-1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dijkstra</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//维护当前未在st中标记过且离源点最近的点</span><br>    PriorityQueue&lt;PII&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;PII&gt;();<br>    Arrays.fill(dist, INF);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    queue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PII</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">while</span>(!queue.isEmpty())<br>    &#123;<br>        <span class="hljs-comment">//1、找到当前未在s中出现过且离源点最近的点</span><br>        <span class="hljs-type">PII</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> queue.poll();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> p.getSecond();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> p.getFirst();<br>        <span class="hljs-keyword">if</span>(st[t]) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-comment">//2、将该点进行标记</span><br>        st[t] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">//3、用t更新其他点的距离</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> h[t];i != -<span class="hljs-number">1</span>;i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> e[i];<br>            <span class="hljs-keyword">if</span>(dist[j] &gt; distance + w[i])<br>            &#123;<br>                dist[j] = distance + w[i];<br>                queue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PII</span>(dist[j],j));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dist[n] == INF) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="Bellman-Ford算法"><a href="#Bellman-Ford算法" class="headerlink" title="Bellman-Ford算法"></a>Bellman-Ford算法</h4><ol><li><p>边的存储：自定义类Node</p></li><li><p>Bellman-Ford 算法是求<strong>含负权图的单源最短路径</strong>的一种算法，效率较低，代码难度较小。其原理为连续进行松弛，在每次松弛时把每条边都更新一下，若在 n-1 次松弛后还能更新，则说明图中有负环，因此无法得出结果，否则就完成。<br>(通俗的来讲就是：假设 1 号点到 n 号点是可达的，每一个点同时向指向的方向出发，更新相邻的点的最短距离，通过循环 n-1 次操作，若图中不存在负环，则 1 号点一定会到达 n 号点，若图中存在负环，则在 n-1 次松弛后一定还会更新)。</p></li><li><p>bellman - ford算法的具体步骤:</p></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span> n次<br><span class="hljs-keyword">for</span> 所有边 a,b,w (松弛操作)<br>dist[b] = min(dist[b],back[a] + w)<br></code></pre></div></td></tr></table></figure><ol start="4"><li><p>注意：<code>back[] </code>数组是上一次迭代后<code>dist[] </code>数组的备份，由于是每个点同时向外出发，因此需要对 <code>dist[] </code>数组进行备份，若不进行备份会因此发生串联效应，影响到下一个点。</p></li><li><p>在下面代码中，是否能到达n号点的判断中需要进行<code>if(dist[n] &gt; INF/2)</code>判断，而并非是<code>if(dist[n] == INF)</code>判断，原因是<code>INF</code>是一个确定的值，并非真正的无穷大，会随着其他数值而受到影响，<code>dist[n]</code>大于某个与<code>INF</code>相同数量级的数即可。</p></li><li><p>bellman - ford算法擅长解决<strong>有边数限制</strong>的最短路问题，时间复杂度 <code>O(nm)</code>，其中n为点数，m为边数。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">510</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">M</span> <span class="hljs-operator">=</span> <span class="hljs-number">100010</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n;<span class="hljs-comment">//总点数</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> m;<span class="hljs-comment">//总边数</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> k;<span class="hljs-comment">//最多经过k条边</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] dist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<span class="hljs-comment">//从1到点到n号点的距离</span><br>    <span class="hljs-keyword">static</span> Node[] list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[M];<span class="hljs-comment">//结构体</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">INF</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] back = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<span class="hljs-comment">//备份dist数组</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bellman_ford</span><span class="hljs-params">()</span><br>    &#123;<br>        Arrays.fill(dist, INF);<br><br>        dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; k;i++)<br>        &#123;<br>            back = Arrays.copyOf(dist, n + <span class="hljs-number">1</span>);<span class="hljs-comment">//由于是从1开始存到n</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;j &lt; m;j++)<br>            &#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> list[j];<br>                <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> node.a;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> node.b;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> node.c;<br>                dist[b] = Math.min(dist[b], back[a] + c);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(dist[n] &gt; INF/<span class="hljs-number">2</span>) System.out.println(<span class="hljs-string">&quot;impossible&quot;</span>);<br>        <span class="hljs-keyword">else</span> System.out.println(dist[n]);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>        String[] str1 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>        n = Integer.parseInt(str1[<span class="hljs-number">0</span>]);<br>        m = Integer.parseInt(str1[<span class="hljs-number">1</span>]);<br>        k = Integer.parseInt(str1[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; m;i++)<br>        &#123;<br>            String[] str2 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> Integer.parseInt(str2[<span class="hljs-number">0</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Integer.parseInt(str2[<span class="hljs-number">1</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Integer.parseInt(str2[<span class="hljs-number">2</span>]);<br>            list[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(a,b,c);<br>        &#125;<br>        bellman_ford();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.a = a;<br>        <span class="hljs-built_in">this</span>.b = b;<br>        <span class="hljs-built_in">this</span>.c = c;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="SPFA算法"><a href="#SPFA算法" class="headerlink" title="SPFA算法"></a>SPFA算法</h4><ol><li><p>SPFA 算法是 Bellman-Ford算法 的队列优化算法的别称，通常用于求<strong>含负权边的单源最短路径</strong>，以及判负权环。SPFA一般情况复杂度是<code>O(m)</code>最坏情况下复杂度和朴素 Bellman-Ford 相同，为<code>O(nm)</code>。</p><p><strong>bellman-ford算法操作如下</strong>：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span> n次<br><span class="hljs-keyword">for</span> 所有边 a,b,w (松弛操作)<br>dist[b] = min(dist[b],back[a] + w)<br></code></pre></div></td></tr></table></figure><p>SPFA算法对第二行中所有边进行松弛操作进行了优化，原因是在Bellman-Ford算法中，即使该点的最短距离尚未更新过，但还是需要用尚未更新过的值去更新其他点，由此可知，该操作是不必要的，我们只需要找到更新过的值去更新其他点即可。</p></li><li><p>SPFA算法步骤</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">queue &lt;– <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> queue 不为空<br> (<span class="hljs-number">1</span>) t &lt;– 队头<br> queue.pop()<br>(<span class="hljs-number">2</span>)用 t 更新所有出边 t –&gt; b，权值为w<br> queue &lt;– b (若该点被更新过，则拿该点更新其他点)<br></code></pre></div></td></tr></table></figure></li><li><p>SPFA也能解决<strong>权值为正</strong>的图的最短距离问题，且一般情况下比Dijkstra算法还好</p></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">100010</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n; <span class="hljs-comment">// 总点数</span><br><span class="hljs-comment">// 邻接表存储所有边</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] h = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] ne = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] w = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">// dist[x]存储1号点到x的最短距离，cnt[x]存储1到x的最短路中经过的点数</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] dist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br><span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span>[] st = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[N]; <span class="hljs-comment">// 存储每个点是否在队列中</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">INF</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">spfa</span><span class="hljs-params">()</span><br>&#123;<br>    Arrays.fill(dist, INF);<br>    Queue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    queue.add(<span class="hljs-number">1</span>);<br>    st[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<span class="hljs-comment">// 标记1号点在队列中</span><br>    <span class="hljs-keyword">while</span>(!queue.isEmpty())<br>    &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> queue.poll();<br>        st[t] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> h[t];i != -<span class="hljs-number">1</span>;i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> e[i];<span class="hljs-comment">// 获取点编号</span><br>            <span class="hljs-comment">// 若该点被更新过，则加入队列中</span><br>            <span class="hljs-keyword">if</span>(dist[j] &gt; dist[t] + w[i])<br>            &#123;<br>                dist[j] = dist[t] + w[i];<br>                <span class="hljs-comment">// 判断该点是否已经在队列中</span><br>                <span class="hljs-keyword">if</span>(!st[j])<br>                &#123;<br>                    queue.add(j);<br>                    st[j] = <span class="hljs-literal">true</span>;<span class="hljs-comment">// 标记已加入队列</span><br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125; <br></code></pre></div></td></tr></table></figure><h4 id="SPFA判负环"><a href="#SPFA判负环" class="headerlink" title="SPFA判负环"></a>SPFA判负环</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n; <span class="hljs-comment">// 总点数</span><br> <span class="hljs-comment">// 邻接表存储所有边</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">2010</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">M</span> <span class="hljs-operator">=</span> <span class="hljs-number">10010</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] h = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[M];<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] ne = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[M];<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] w = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[M];<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] dist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<span class="hljs-comment">// 记录虚拟点到x的最短距离</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] cnt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<span class="hljs-comment">// 从虚拟点到x经过的边数 </span><br><span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span>[] st = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[N];<span class="hljs-comment">// 存储每个点是否在队列中</span><br><br><span class="hljs-comment">// 如果存在负环，则返回true，否则返回false。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">spfa</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 不需要初始化dist数组</span><br>    <span class="hljs-comment">// 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理一定有两个点相同，所以存在环。</span><br>    Queue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<br>    <span class="hljs-comment">// 将所有点进入队列</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= n;i++) &#123;<br>        queue.add(i);<br>        st[i] = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!queue.isEmpty()) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> queue.poll();<br>        st[t] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> h[t]; i != -<span class="hljs-number">1</span>;i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> e[i];<br>            <span class="hljs-keyword">if</span>(dist[j] &gt; dist[t] + w[i]) &#123;<br>                dist[j] = dist[t] + w[i];<br>                cnt[j] = cnt[t] + <span class="hljs-number">1</span>; <br><br>                <span class="hljs-keyword">if</span>(cnt[j] &gt;= n) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">if</span>(!st[j]) &#123;<br>                    queue.add(j);<br>                    st[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h4><ul><li><p><code>f[i, j, k]</code>表示从<code>i</code>走到<code>j</code>的路径上除<code>i</code>和<code>j</code>点外只经过<code>1</code>到<code>k</code>的点的所有路径的最短距离。那么<code>f[i, j, k] = min(f[i, j, k - 1), f[i, k, k - 1] + f[k, j, k - 1]</code>。<br>因此在计算第<code>k</code>层的<code>f[i, j]</code>的时候必须先将第<code>k - 1</code>层的所有状态计算出来，所以需要把<code>k</code>放在最外层。</p></li><li><p>读入邻接矩阵，将次通过动态规划装换成从<code>i</code>到<code>j</code>的最短距离矩阵</p></li><li><p>在下面代码中，判断从<code>a</code>到<code>b</code>是否是无穷大距离时，需要进行<code>if(t &gt; INF/2)</code>判断，而并非是<code>if(t == INF)</code>判断，原因是<code>INF</code>是一个确定的值，并非真正的无穷大，会随着其他数值而受到影响，<code>t</code>大于某个与<code>INF</code>相同数量级的数即可。</p></li><li><p>时间复杂度<code>O(n^3)</code>，<code>n</code>表示点数</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> m;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> q;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">210</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">INF</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N][N];<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">floyd</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;k &lt;= n;k++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= n;i++)<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt;= n;j++)<br>                    d[i][j] = Math.min(d[i][j], d[i][k] + d[k][j]);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>        String[] str1 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>        n = Integer.parseInt(str1[<span class="hljs-number">0</span>]);<br>        m = Integer.parseInt(str1[<span class="hljs-number">1</span>]);<br>        q = Integer.parseInt(str1[<span class="hljs-number">2</span>]);<br>        <span class="hljs-comment">// 初始化</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>                <span class="hljs-keyword">if</span>(i == j) d[i][j] = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">else</span> d[i][j] = INF;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(m -- &gt; <span class="hljs-number">0</span>) &#123;<br>            String[] str2 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> Integer.parseInt(str2[<span class="hljs-number">0</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Integer.parseInt(str2[<span class="hljs-number">1</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Integer.parseInt(str2[<span class="hljs-number">2</span>]);<br>            d[a][b] = Math.min(d[a][b], c);<span class="hljs-comment">//若有重边选择短的边</span><br>        &#125;<br>        floyd();<br>        <span class="hljs-keyword">while</span>(q -- &gt; <span class="hljs-number">0</span>) &#123;<br>            String[] str3 = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> Integer.parseInt(str3[<span class="hljs-number">0</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Integer.parseInt(str3[<span class="hljs-number">1</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> d[a][b];<br>            <span class="hljs-keyword">if</span>(t &gt; INF / <span class="hljs-number">2</span>) System.out.println(<span class="hljs-string">&quot;impossible&quot;</span>);<br>            <span class="hljs-keyword">else</span> System.out.println(t);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><h4 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">朴素prim（解决稠密图），时间复杂度O(n^2 + m)，n为点数，m为边数</span><br><span class="hljs-comment">1. 初始化dist[i] = INF</span><br><span class="hljs-comment">    s:当前已经在连通块中的所有点</span><br><span class="hljs-comment">    2. for i in 1...n</span><br><span class="hljs-comment">        (1)t &lt;-- 找到集合外距离最近的点  总共O(n^2)次</span><br><span class="hljs-comment">        (2)s &lt;-- t对该点进行标志 总共O(n)次</span><br><span class="hljs-comment">        (3)用t更新其他点到集合的距离  总共O(n^2)级别次</span><br><span class="hljs-comment">    对于给定n个点，将所有点两两相连，总变数为m = n*(n-1)/2 </span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">510</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">INF</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N][N];<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] dist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<span class="hljs-comment">//表示到集合的最短距离</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span>[] st = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[N];<br><br><span class="hljs-comment">// 如果图不连通，则返回INF(值是0x3f3f3f3f), 否则返回最小生成树的树边权重之和</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">prim</span><span class="hljs-params">()</span> &#123;<br>    Arrays.fill(dist, INF);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; n;i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt;= n;j++) &#123;<br>            <span class="hljs-keyword">if</span>(!st[j] &amp;&amp; (t == -<span class="hljs-number">1</span> || dist[t] &gt; dist[j]))<br>                t = j;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i != <span class="hljs-number">0</span> &amp;&amp; dist[t] == INF) <span class="hljs-keyword">return</span> INF;<br>        <span class="hljs-comment">//标记已加入集合</span><br>        st[t] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(i != <span class="hljs-number">0</span>) res += dist[t];<br>        <span class="hljs-comment">//用t更新其他点</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt;= n;j++) dist[j] = Math.min(dist[j], g[t][j]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Kruskal算法（解决稀疏图），时间复杂度是O(mlogm)，m为边数</span><br><span class="hljs-comment">    1. 将所有边按权重从小到大排序 共O(mlogm)次</span><br><span class="hljs-comment">    2. 枚举每条边a&lt;--&gt;b权重c 共O(m)次</span><br><span class="hljs-comment">    if a,b两点不通</span><br><span class="hljs-comment">            将a&lt;--&gt;b边加入集合中</span><br><span class="hljs-comment">注意：(1)2操作使用并查集</span><br><span class="hljs-comment"> (2)需要使用cnt来记录加进集合的边数，若cnt &lt; n-1，表示不能遍历所有点</span><br><span class="hljs-comment">*/</span>     <br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">100010</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">M</span> <span class="hljs-operator">=</span> <span class="hljs-number">200010</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">INF</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n, m; <span class="hljs-comment">// n是点数，m是边数</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<span class="hljs-comment">// 并查集的父节点数组</span><br><span class="hljs-keyword">static</span> Edge[] edge = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Edge</span>[M];<span class="hljs-comment">// 存储边</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123; <span class="hljs-comment">// 并查集核心操作</span><br>    <span class="hljs-keyword">if</span>(p[x] != x) p[x] = find(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kruskal</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    Arrays.sort(edge, <span class="hljs-number">0</span>, m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= n;i ++) p[i] = i; <span class="hljs-comment">// 初始化并查集</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; m;i ++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> edge[i].a;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> edge[i].b;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> edge[i].w;<br>        a = find(a);<br>        b = find(b);<br>        <span class="hljs-keyword">if</span>(a != b) &#123;<span class="hljs-comment">// 如果两个连通块不连通，则将这两个连通块合并</span><br>            p[a] = b;<br>            res += w;<br>            cnt ++;<span class="hljs-comment">//计算边数</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cnt &lt; n - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> INF;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Edge</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Edge&gt; &#123;<br>    <span class="hljs-type">int</span> a,b,w;<br>    Edge(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> w) &#123;<br>        <span class="hljs-built_in">this</span>.a = a;<br>        <span class="hljs-built_in">this</span>.b = b;<br>        <span class="hljs-built_in">this</span>.w = w;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Edge o)</span> &#123;<br>        <span class="hljs-keyword">return</span> Integer.compare(w, o.w);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高级数据结构</title>
    <link href="/Algorithm/DataStructure/"/>
    <url>/Algorithm/DataStructure/</url>
    
    <content type="html"><![CDATA[<h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><h4 id="1-基础并查集"><a href="#1-基础并查集" class="headerlink" title="1.基础并查集"></a><strong>1.基础并查集</strong></h4><p>参考题解:<a href="https://www.acwing.com/solution/content/33345/">AcWing 836. 基础_并查集_合并集合java_python_c++  </a></p><p>基本操作：</p><ul><li>将两个集合合并</li><li>询问两个元素是否在一个集合中</li></ul><p>基本原理：每个集合用一棵树来表示。树的编号就是整个集合的编号。每个节点存储它的父节点，<code>p[x]</code>表示<code>x</code>的父节点</p><p>其他操作：</p><ul><li>判断树根 <code>if(p[x] = x)</code></li><li>求x的集合编号 <code>while(p[x] != x) x = p[x]</code></li><li>合并两个集合，这两将x的根节点嫁接到y的根节点, <code>px</code>为<code>x</code>的根节点， <code>py</code>为<code>y</code>的根节点，嫁接<code>p[px] = py</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">100010</span>;     <span class="hljs-comment">// 并查集节点数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];     <span class="hljs-comment">// p[]存储并查集祖宗节点编号</span><br><br><span class="hljs-comment">// 初始化并查集：最开始每个数各自在一个集合中</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) p[i] = i;<br><br><span class="hljs-comment">// 并查集查找+路径压缩</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">if</span>(p[x] != x) p[x] = find(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-comment">// 并查集合并操作：将a合并到b集合中</span><br>p[find(a)] = find(b);<br><br><span class="hljs-comment">// 判断a和b是否属于同一集合</span><br>find(a) == find(b);<br><br><span class="hljs-comment">// 其他路径压缩方法：</span><br><span class="hljs-comment">// 1.路径分裂：使路径上的每个节点都指向其祖父节点（parent的parent）</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-keyword">while</span>(x != p[x])&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> p[x];<br>        p[x] = p[p[x]];<br>        x = parent;<br>    &#125;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-comment">// 2. 路径减半：使路径上每隔一个节点就指向其祖父节点（parent的parent）</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-keyword">while</span>(x != p[x])&#123;<br>        p[x] = p[p[x]];<br>        x = p[x];<br>    &#125;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>面向对象java版UnionFind类(支持<strong>路径压缩</strong>和<strong>按秩合并</strong>)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFind</span> &#123;<br>    <span class="hljs-type">int</span>[] p;<br>    <span class="hljs-type">int</span>[] rank;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnionFind</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        rank = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            p[i] = i;<br>            rank[i] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 路径压缩</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-keyword">if</span>(x != p[x]) p[x] = find(p[x]);<br>        <span class="hljs-keyword">return</span> p[x];<br>    &#125;<br>    <span class="hljs-comment">// 按秩合并</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">union</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">px</span> <span class="hljs-operator">=</span> find(x);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">py</span> <span class="hljs-operator">=</span> find(y);<br>        <span class="hljs-keyword">if</span>(px == py) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>(rank[px] &lt; rank[py]) p[px] = py;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rank[px] &gt; rank[py]) p[py] = px;<br>        <span class="hljs-keyword">else</span> &#123;<br>            p[px] = py;<br>            rank[px] += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 判断是否在同一集合</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-keyword">return</span> find(x) == find(y);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-并查集求连通块数量"><a href="#2-并查集求连通块数量" class="headerlink" title="2.并查集求连通块数量"></a><strong>2.并查集求连通块数量</strong></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] p, cnt;<br>p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<span class="hljs-comment">// 并查集祖宗节点数组</span><br>cnt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<span class="hljs-comment">// 并查集连通块大小</span><br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    p[i] = i;<br>    cnt[i] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 查询+路径压缩</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) &#123;<br>        p[x] = find(p[x]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-comment">// 合并并查集，合并时更新连通块大小</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pa</span> <span class="hljs-operator">=</span> find(a), pb = find(b);<br>    <span class="hljs-keyword">if</span> (pa != pb) &#123;<br>        p[pb] = pa;<br>        cnt[pa] += cnt[pb];<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 判断两个节点a和b是否在同一集合</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pa</span> <span class="hljs-operator">=</span> find(a), pb = find(b);<br>    <span class="hljs-type">return</span> <span class="hljs-variable">pa</span> <span class="hljs-operator">=</span>= pb;<br>&#125;<br><br><span class="hljs-comment">// 返回节点a所在集合（连通块）大小</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">count</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pa</span> <span class="hljs-operator">=</span> find(a);<br>    <span class="hljs-keyword">return</span> cnt[pa];<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-维护集合中每个节点到根节点距离"><a href="#3-维护集合中每个节点到根节点距离" class="headerlink" title="3.维护集合中每个节点到根节点距离"></a><strong>3.维护集合中每个节点到根节点距离</strong></h4><p>可用于求同一集合中任意两点的距离</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">30010</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];        <span class="hljs-comment">// 每个节点的根节点</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] size = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];     <span class="hljs-comment">// 并查集中连通块大小</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];        <span class="hljs-comment">// 每个节点到根节点的距离</span><br><br><span class="hljs-comment">// main()中初始化并查集</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>    p[i] = i;<br>    size[i] = <span class="hljs-number">1</span>;<br>    d[i] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 查找</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">if</span>(p[x] != x) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> find(p[x]);<br>        d[x] += d[p[x]];<br>        p[x] = root;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-comment">// 合并</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pa</span> <span class="hljs-operator">=</span> find(a);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pb</span> <span class="hljs-operator">=</span> find(b);<br>    <span class="hljs-keyword">if</span>(pa == pb) <span class="hljs-keyword">return</span>;<br>    p[pa] = pb;<br>    d[pa] = size[pb];<br>    size[pb] += size[pa];<br>&#125;<br><br><span class="hljs-comment">// main()中求距离</span><br><span class="hljs-type">int</span> <span class="hljs-variable">pa</span> <span class="hljs-operator">=</span> find(a), pb = find(b);<br><span class="hljs-keyword">if</span>(pa == pb) out.println(Math.max(<span class="hljs-number">0</span>, Math.abs(d[a] - d[b]) - <span class="hljs-number">1</span>));<br><span class="hljs-keyword">else</span> out.println(<span class="hljs-string">&quot;-1&quot;</span>);<br></code></pre></div></td></tr></table></figure><h4 id="4-带权并查集"><a href="#4-带权并查集" class="headerlink" title="4.带权并查集"></a><strong>4.带权并查集</strong></h4><ul><li>力扣<a href="https://leetcode-cn.com/problems/evaluate-division/">399. 除法求值</a></li><li><a href="https://www.acwing.com/activity/content/problem/content/1582/">AcWing 239. 奇偶游戏</a></li></ul><h4 id="5-扩展域-种类-并查集"><a href="#5-扩展域-种类-并查集" class="headerlink" title="5.扩展域(种类)并查集"></a><strong>5.扩展域(种类)并查集</strong></h4><ul><li>题目：POJ<a href="http://poj.org/problem?id=1182">食物链</a>  题解：<a href="https://www.cnblogs.com/wkfvawl/p/9726554.html">食物链 POJ 1182（种类并查集）</a></li><li><a href="https://www.acwing.com/activity/content/problem/content/1582/">AcWing 239. 奇偶游戏</a></li></ul><h3 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h3><h4 id="1-数组模拟Trie树"><a href="#1-数组模拟Trie树" class="headerlink" title="1.数组模拟Trie树"></a>1.数组模拟Trie树</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.math.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(System.out)));<br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">100010</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N][<span class="hljs-number">26</span>];<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] cnt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> idx;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">char</span>[] str)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(son[p][u] == <span class="hljs-number">0</span>) son[p][u] = ++idx;<br>            p = son[p][u];<br>        &#125;<br>        cnt[p]++;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-type">char</span>[] str)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(son[p][u] == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            p = son[p][u];<br>        &#125;<br>        <span class="hljs-keyword">return</span> cnt[p];<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException<br>    &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> Integer.parseInt(in.readLine());<br>        <span class="hljs-keyword">while</span>(n-- &gt; <span class="hljs-number">0</span>) &#123;<br>            String[] str = in.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-keyword">if</span>(str[<span class="hljs-number">0</span>].equals(<span class="hljs-string">&quot;I&quot;</span>)) insert(str[<span class="hljs-number">1</span>].toCharArray());<br>            <span class="hljs-keyword">else</span> out.println(query(str[<span class="hljs-number">1</span>].toCharArray()));<br>        &#125;<br>        out.close();<br>        in.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-面向对象实现Trie类"><a href="#2-面向对象实现Trie类" class="headerlink" title="2.面向对象实现Trie类"></a>2.面向对象实现Trie类</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> Integer.parseInt(br.readLine());<br>        <span class="hljs-type">Trie</span> <span class="hljs-variable">trie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Trie</span>();<br>        <span class="hljs-keyword">while</span> (n-- &gt; <span class="hljs-number">0</span>) &#123;<br>            String[] s = br.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">op</span> <span class="hljs-operator">=</span> s[<span class="hljs-number">0</span>];<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> s[<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (op.equals(<span class="hljs-string">&quot;I&quot;</span>)) &#123;<br>                trie.insert(str);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(trie.query(str));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// Trie节点定义</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieNode</span> &#123;<br>    <span class="hljs-type">int</span> cnt;<br>    <span class="hljs-type">char</span> value;<br>    TrieNode[] son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieNode</span>[<span class="hljs-number">26</span>];<br><br>    TrieNode(<span class="hljs-type">char</span> value) &#123;<br>        <span class="hljs-built_in">this</span>.cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">haveSon</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> &#123;<br>        <span class="hljs-keyword">return</span> son[c - <span class="hljs-string">&#x27;a&#x27;</span>] != <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Trie树：支持插入和查询</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br>    TrieNode root;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Trie</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieNode</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-type">TrieNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : str.toCharArray()) &#123;<br>            <span class="hljs-keyword">if</span> (!cur.haveSon(c)) &#123;<br>                cur.son[c - <span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieNode</span>(c);<br>            &#125;<br>            cur = cur.son[c - <span class="hljs-string">&#x27;a&#x27;</span>];<br>        &#125;<br>        cur.cnt++;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">query</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-type">TrieNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : str.toCharArray()) &#123;<br>            <span class="hljs-keyword">if</span> (!cur.haveSon(c)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            cur = cur.son[c - <span class="hljs-string">&#x27;a&#x27;</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> cur.cnt;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a><strong>操作</strong></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//传入节点编号，用子节点信息来算父节点信息</span><br>pushu(<span class="hljs-type">int</span> u)<br><br><span class="hljs-comment">//将一段区间初始化为一颗线段树</span><br>build()<br><br><span class="hljs-comment">//修改操作,修改某一个点或者某一个区间（懒标记）</span><br>modify()<br><br><span class="hljs-comment">//查询某一段区间的信息</span><br>query()<br></code></pre></div></td></tr></table></figure><h4 id="线段树维护区间最大值案例"><a href="#线段树维护区间最大值案例" class="headerlink" title="线段树维护区间最大值案例"></a><strong>线段树维护区间最大值案例</strong></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 结构：一般使用类来存储线段树,空间大小开四倍</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> l;<span class="hljs-comment">//维护的区间左端点</span><br>    <span class="hljs-type">int</span> r;<span class="hljs-comment">//维护的区间右端点</span><br>    <span class="hljs-type">int</span> v;<span class="hljs-comment">//维护的信息，以最大值为例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> v)</span> &#123;<br>        <span class="hljs-built_in">this</span>.l = l;<br>        <span class="hljs-built_in">this</span>.r = r;<br>        <span class="hljs-built_in">this</span>.v = v;     <br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span><br>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)<span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> m, p;<br>    <span class="hljs-keyword">static</span> Node[] tr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[N * <span class="hljs-number">4</span>];<span class="hljs-comment">// 线段树空间大小开四倍</span><br>    <br>    <span class="hljs-comment">// 建树</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">build</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>        tr[u] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>        tr[u]. l = l; tr[u].r = r;<br>        <span class="hljs-keyword">if</span>(l == r) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        build(u &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>        build(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    &#125;<br><br>    <span class="hljs-comment">// pushup操作,用子节点信息来更新父节点信息,以维护最大值为例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> &#123;<br>        tr[u].v = Math.max(tr[u &lt;&lt; <span class="hljs-number">1</span>].v, tr[u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].v);<br>    &#125;<br><br>    <span class="hljs-comment">// 查询操作，用来查询某一段区间内的信息,以最大值为例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>        <span class="hljs-keyword">if</span>(tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) <span class="hljs-keyword">return</span> tr[u].v;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> tr[u].l + tr[u].r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(l &lt;= mid) v = query(u &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>        <span class="hljs-keyword">if</span>(r &gt; mid) v = Math.max(v, query(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r));<br>        <span class="hljs-keyword">return</span> v;<br>    &#125;<br><br>    <span class="hljs-comment">// 修改操作，用来修改某一叶子节点并更新其所有父节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span> &#123;<br>        <span class="hljs-keyword">if</span>(tr[u].l == x &amp;&amp; tr[u].r == x) tr[u].v = v;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> tr[u].l + tr[u].r &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(x &lt;= mid) modify(u &lt;&lt; <span class="hljs-number">1</span>, x, v);<br>            <span class="hljs-keyword">else</span> modify(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, x, v);<br>            pushup(u);<span class="hljs-comment">// 修改后一定要向上更新最大值</span><br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>       m = in.nextInt();<br>       p = in.nextInt();<br>       <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, last = <span class="hljs-number">0</span>;<br>       build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, m);<span class="hljs-comment">// 建树</span><br>       <br>        <span class="hljs-keyword">while</span>(m-- &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">op</span> <span class="hljs-operator">=</span> in.next();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> in.nextInt();<br>            <span class="hljs-keyword">if</span>(op.equals(<span class="hljs-string">&quot;Q&quot;</span>)) &#123;<br>                last = query(<span class="hljs-number">1</span>, n - x + <span class="hljs-number">1</span>, n);<br>                System.out.println(last);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                modify(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>, (<span class="hljs-type">int</span>)(((<span class="hljs-type">long</span>)x + last) % p));<br>                n++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><ul><li>区间和问题解决方案的选择：<a href="https://leetcode-cn.com/problems/range-sum-query-mutable/solution/guan-yu-ge-lei-qu-jian-he-wen-ti-ru-he-x-41hv/">关于各类「区间和」问题如何选择解决方案</a></li><li>树状数组、线段树、平衡树总结：<a href="https://leetcode-cn.com/problems/count-of-range-sum/solution/xian-ren-zhi-lu-ru-he-xue-xi-ke-yi-jie-jue-ben-ti-/">【仙人指路】如何学习可以解决本题的算法与数据结构</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础算法</title>
    <link href="/Algorithm/Base/"/>
    <url>/Algorithm/Base/</url>
    
    <content type="html"><![CDATA[<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="1-Java数组排序"><a href="#1-Java数组排序" class="headerlink" title="1.Java数组排序"></a>1.Java数组排序</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Integer[] q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[<span class="hljs-number">10</span>];<br><span class="hljs-comment">// 从0到最后一位排序，默认升序</span><br>Arrays.sort(q);<br><span class="hljs-comment">// 指定范围排序[1,5)</span><br>Arrays.sort(q, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br><span class="hljs-comment">// 从1到n排序，使用lambda表达式自定义排序规则：从大到小</span><br><span class="hljs-comment">// 使用Integer.compare()方法时，数组必须是Integer[]</span><br>Arrays.sort(q, <span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>, (a, b) -&gt; Integer.compare(b, a));<br><span class="hljs-comment">// 使用Collections.reverseOrder()实现降序</span><br>Arrays.sort(q, Collections.reverseOrder());<br></code></pre></div></td></tr></table></figure><h4 id="2-List集合排序"><a href="#2-List集合排序" class="headerlink" title="2.List集合排序"></a>2.List集合排序</h4><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>步骤：</p><ol><li><p>确定分界点，把数组分成两部分。<br>常用的分界点有 数组第一个数，数组最后一个数，数组中间那个数<br>一般我会选用数组中间那个数作为分界点，这样后面的写法也固定了，不容易遇到边界问题。</p></li><li><p>根据分界点调整数组，使得分界点左边的数都小于等于分界点，分界点右边的数都大于等于分界点<br>方法：利用双指针的移动，左指针在左边大于分界点的数停下，右指针在右边小于分界点的数停下，交换这两个数。</p></li><li><p>分别递归处理左右两边。</p></li><li><p>时间复杂度为O(nlogn)。</p></li></ol><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> l ,<span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-keyword">if</span>(l &gt;= r) <span class="hljs-keyword">return</span>;                  <span class="hljs-comment">//递归结束条件</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> l - <span class="hljs-number">1</span>;                      <span class="hljs-comment">//左边的指针</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> r + <span class="hljs-number">1</span>;                      <span class="hljs-comment">//右边的指针</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> arr[l + ((r - l) &gt;&gt; <span class="hljs-number">1</span>)];    <span class="hljs-comment">//选取数组中间的那个数作为分界点，把数组分成两部分</span><br>    <span class="hljs-keyword">while</span>(i &lt; j)&#123;<br>        <span class="hljs-keyword">do</span>&#123;<br>            i++;<br>        &#125;<span class="hljs-keyword">while</span>(arr[i] &lt; x);             <span class="hljs-comment">//在左边大于分界点的数停下</span><br>        <span class="hljs-keyword">do</span>&#123;<br>            j--;<br>        &#125;<span class="hljs-keyword">while</span>(arr[j] &gt; x);             <span class="hljs-comment">//在右边小于分界点的数停下</span><br>        <span class="hljs-keyword">if</span>(i &lt; j)&#123;                      <span class="hljs-comment">//交换两个数</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>            arr[i] = arr[j];<br>            arr[j] = temp;<br>        &#125;<br>    &#125;<br>    quickSort(arr,l,j);                 <span class="hljs-comment">//递归处理左边</span><br>    quickSort(arr,j+<span class="hljs-number">1</span>,r);               <span class="hljs-comment">//递归处理右边</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>步骤：</p><ol><li>将数组平均分成两部分（奇数个数的话就是一个为n/2个，一个为n/2+1个）。</li><li>分别递归地排序数组的这两部分。</li><li>将排好序的两部分归并成一整块。<br>方法：利用双指针的移动，将两部分中更小的那个数存到临时存储数组中。</li><li>时间复杂度为O(nlogn)。</li></ol><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-keyword">if</span>(l &gt;= r) <span class="hljs-keyword">return</span>;                      <span class="hljs-comment">//递归结束条件</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + (r - l)/<span class="hljs-number">2</span>;                <span class="hljs-comment">//将数组分成[L,mid] 和 [mid+1,R] 两部分</span><br>    mergeSort(arr,l,mid);                   <span class="hljs-comment">//递归排序左半部分</span><br>    mergeSort(arr,mid+<span class="hljs-number">1</span>,r);                 <span class="hljs-comment">//递归排序右半部分</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> l;                              <span class="hljs-comment">//左半部分的指针</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> mid + <span class="hljs-number">1</span>;                        <span class="hljs-comment">//右半部分的指针</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;                              <span class="hljs-comment">//临时存储数组的索引</span><br>    <span class="hljs-keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;              <span class="hljs-comment">//循环找到两部分中更小的那个数</span><br>        <span class="hljs-keyword">if</span>(arr[i] &lt;= arr[j]) temp[k++] = arr[i++];<br>        <span class="hljs-keyword">else</span> temp[k++] = arr[j++];          <span class="hljs-comment">//temp为临时存储数组</span><br>    &#125;<br>    <span class="hljs-keyword">while</span>(i &lt;= mid) temp[k++] = arr[i++];   <span class="hljs-comment">//把左半部分没存入的数存到临时存储数组中</span><br>    <span class="hljs-keyword">while</span>(j &lt;= r) temp[k++] = arr[j++];     <span class="hljs-comment">//把右半部分没存入的数存到临时存储数组中</span><br>    <span class="hljs-keyword">for</span>(i = l,j = <span class="hljs-number">0</span>; i &lt;= r; i++,j++)&#123;      <span class="hljs-comment">//将临时存储数组中排好序的数复制到原数组中</span><br>        arr[i] = temp[j];<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>堆排序</p><p><strong>思路</strong>：首先建立一个堆，从n/2位置开始，不断的down直到1，构造一个小顶堆，每一次输出堆中第一个元素，然后将第一个元素与最后一个元素进行交换，删掉最后一个元素，再次维护堆就可以了</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">100010</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br><span class="hljs-comment">// 向下调整</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">downHeap</span><span class="hljs-params">(<span class="hljs-type">int</span> pos, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">while</span>(pos &lt;= n) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> pos;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> pos &lt;&lt; <span class="hljs-number">1</span>, right = pos &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(left &lt;= n &amp;&amp; q[left] &lt; q[temp]) temp = left;<br>        <span class="hljs-keyword">if</span>(right &lt;= n &amp;&amp; q[right] &lt; q[temp]) temp = right;<br>        <span class="hljs-keyword">if</span>(temp == pos) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> q[temp];<br>        q[temp] = q[pos];<br>        q[pos] = t;<br>        pos = temp;<br>    &#125;<br>&#125; <br><br><span class="hljs-comment">// 建堆</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n &gt;&gt; <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) downHeap(i, n);<br></code></pre></div></td></tr></table></figure><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><p>二分就是把区间划分成两部分，我把这两部分分别记为left 和 right。满足left就一定不满足right，满足right就一定不满足left。</p><h4 id="整数二分："><a href="#整数二分：" class="headerlink" title="整数二分："></a>整数二分：</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//check(mid)是对mid处的数进行判断。</span><br><span class="hljs-comment">//若符合right，答案就在left。即binarySearch1</span><br><span class="hljs-comment">//若符合left，答案就在right。即binarySearch2</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch1</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + (r - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;      <br>        <span class="hljs-keyword">if</span>(check(mid)) r = mid;        <br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;               <br>    &#125;<br>    <span class="hljs-keyword">return</span> l;                          <br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch2</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + (r - l) / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;  <br>        <span class="hljs-keyword">if</span>(check(mid)) l = mid;         <br>        <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;               <br>    &#125;<br>    <span class="hljs-keyword">return</span> l;  <br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="实数二分"><a href="#实数二分" class="headerlink" title="实数二分"></a>实数二分</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-title function_">binarySearch3</span><span class="hljs-params">(<span class="hljs-type">double</span> l,<span class="hljs-type">double</span> r)</span>&#123;<br>    <span class="hljs-type">double</span> eps;<span class="hljs-comment">//根据题目设置精度，一般是题目精度的1e-2倍</span><br>    <span class="hljs-keyword">while</span>(r - l &gt; eps)&#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (r + l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(check(mid)) l = mid;<br>        <span class="hljs-keyword">else</span> r = mid;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="前缀和与差分"><a href="#前缀和与差分" class="headerlink" title="前缀和与差分"></a>前缀和与差分</h3><h4 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">S[i] = a[<span class="hljs-number">1</span>] + a[<span class="hljs-number">2</span>] + ... a[i]<br>a[l] + ... + a[r] = S[r] - S[l - <span class="hljs-number">1</span>]<br></code></pre></div></td></tr></table></figure><h4 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>][m+<span class="hljs-number">1</span>];<br><span class="hljs-type">int</span>[][] s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>][m+<span class="hljs-number">1</span>];<br><span class="hljs-comment">// 预处理：S[i, j] = 第i行j列格子左上部分所有元素的和</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> ; i &lt;= n  ; i ++ )&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> ;j &lt;= m ; j ++ )&#123;<br>        S[i][j] = S[i-<span class="hljs-number">1</span>][j] + S[i][j-<span class="hljs-number">1</span>] - S[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>] + a[i][j];<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：</span><br>S[x2, y2] - S[x1 - <span class="hljs-number">1</span>, y2] - S[x2, y1 - <span class="hljs-number">1</span>] + S[x1 - <span class="hljs-number">1</span>, y1 - <span class="hljs-number">1</span>]<br></code></pre></div></td></tr></table></figure><h4 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h4><p><strong>差分定义</strong>：差分是求前缀和的逆操作，对于原数组<code>a[n]</code>,构造出一个数组<code>b[n]</code>,使<code>a[n]</code>为<code>b[n]</code>的前缀和。一般用于快速对整个数组进行操作，比如对将<code>a</code>数组中<code>[l,r]</code>部分的数据全部加上<code>c</code>，使用差分算法可以将时间复杂度从$O(n)$降低到$O(1)$。</p><p><strong>差分操作</strong>：给区间<code>[l, r]</code>中的每个数加上<code>c</code>：<code>B[l] += c, B[r + 1] -= c</code></p><p><strong>差分构造</strong>：给差分数组<code>b[n]</code>每个位置做一次插入操作，<code>insert(b, i, i, a[i]);</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//a为原数组，b为差分数组</span><br><span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br><span class="hljs-type">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br><br><span class="hljs-comment">//插入操作函数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span>[] b, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c)</span> &#123;<br>    b[l] += c;<br>    b[r+<span class="hljs-number">1</span>] -= c;<br>&#125;<br><br><span class="hljs-comment">// main()中进行如下操作</span><br><span class="hljs-comment">// 初始化差分数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) &#123;<br>    insert(b, i, i, a[i]);          <br>&#125;<br><span class="hljs-comment">// 进行若干次插入</span><br><span class="hljs-keyword">while</span>(m--&gt;<span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-type">int</span> l, r, c;<br>    l = scanner.nextInt();<br>    r = scanner.nextInt();<br>    c = scanner.nextInt();<br>    insert(b, l, r, c);<br>&#125;<br><span class="hljs-comment">// 求一遍前缀和，即可得a[]</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) b[i] += b[i-<span class="hljs-number">1</span>];<br></code></pre></div></td></tr></table></figure><h4 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">1010</span>;<br><span class="hljs-comment">//a为原数组，b为差分数组</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N][N];<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N][N];<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2, <span class="hljs-type">int</span> c)</span> &#123;<br>    b[x1][y1] += c;<br>    b[x1][y2 + <span class="hljs-number">1</span>] -= c;<br>    b[x2 + <span class="hljs-number">1</span>][y1] -= c;<br>    b[x2 + <span class="hljs-number">1</span>][y2 + <span class="hljs-number">1</span>] += c;<br>&#125;<br><br><span class="hljs-comment">// 二维差分数组初始化</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        insert(i, j, i, j, a[i][j]);<br><br><span class="hljs-comment">// 进行若干次插入</span><br><span class="hljs-keyword">while</span>(q-- &gt; <span class="hljs-number">0</span>) &#123;<br>    str = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x1</span> <span class="hljs-operator">=</span> Integer.parseInt(str[<span class="hljs-number">0</span>]), y1 = Integer.parseInt(str[<span class="hljs-number">1</span>]), x2 = Integer.parseInt(str[<span class="hljs-number">2</span>]), y2 = Integer.parseInt(str[<span class="hljs-number">3</span>]), c = Integer.parseInt(str[<span class="hljs-number">4</span>]);<br>    insert(x1, y1, x2, y2, c);<br>&#125;<br><br><span class="hljs-comment">// 对差分数组求二维前缀和，可得原数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>        b[i][j] += b[i - <span class="hljs-number">1</span>][j] + b[i][j - <span class="hljs-number">1</span>] - b[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>        System.out.println(b[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    System.out.println();<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">求n的第k位数字: n &gt;&gt; k &amp; <span class="hljs-number">1</span><br>返回n的最后一位<span class="hljs-number">1</span>：lowbit(n) = n &amp; -n<br></code></pre></div></td></tr></table></figure><h3 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a><strong>双指针算法</strong></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (j &lt; i &amp;&amp; check(i, j)) j ++ ;<br><br>    <span class="hljs-comment">// 具体问题的逻辑</span><br>&#125;<br>常见问题分类：<br>    (<span class="hljs-number">1</span>) 对于一个序列，用两个指针维护一段区间<br>    (<span class="hljs-number">2</span>) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作<br></code></pre></div></td></tr></table></figure><h3 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h3><h4 id="BigInteger类"><a href="#BigInteger类" class="headerlink" title="BigInteger类"></a>BigInteger类</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//对于大数，Java可以轻松解决，因为在Java中,math包下有BigInteger这个类</span><br><span class="hljs-comment">//构造器：new BigInteger(String s);</span><br><br><span class="hljs-comment">// BigInteger a;</span><br><span class="hljs-comment">// BigInteger b;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">加法：a.add(b)</span><br><span class="hljs-comment">减法：a.subtract(b)</span><br><span class="hljs-comment">乘法：a.multiply(b)</span><br><span class="hljs-comment">除法：a.divide(b)</span><br><span class="hljs-comment">取余：a.mod(b)</span><br><span class="hljs-comment">比较：a.compareTo(b)</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h4 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a><strong>高精度加法</strong></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-comment">// C = A + B, A &gt;= 0, B &gt;= 0</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title function_">add</span><span class="hljs-params">(List&lt;Integer&gt; A, List&lt;Integer&gt; B )</span> &#123;<br>        <span class="hljs-keyword">if</span> (A.size() &lt; B.size()) <span class="hljs-keyword">return</span> add(B, A);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        List&lt;Integer&gt; C = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; A.size(); i ++ ) &#123;<br>            t += A.get(i);<br>            <span class="hljs-keyword">if</span> (i &lt; B.size()) t += B.get(i);<br>            C.add(t % <span class="hljs-number">10</span>);<br>            t /= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (t != <span class="hljs-number">0</span>) C.add(t);<br>        <span class="hljs-keyword">return</span> C;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> scan.next();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> scan.next();<br><br>        List&lt;Integer&gt; A = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        List&lt;Integer&gt; B = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> a.length() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) A.add(a.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> b.length() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) B.add(b.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>);<br><br>        List&lt;Integer&gt; C = add(A, B);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> C.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) System.out.print((C.get(i)));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-comment">// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title function_">sub</span><span class="hljs-params">(List&lt;Integer&gt; A,List&lt;Integer&gt; B)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!cmp(A,B))&#123;<br>            <span class="hljs-keyword">return</span> sub(B,A);<br>        &#125;<br><br>        List&lt;Integer&gt; C = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; A.size();i ++)&#123;<br>            t = A.get(i) - t;<br>            <span class="hljs-keyword">if</span>(i &lt; B.size()) t -= B.get(i);<br>            C.add((t + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>);<br><br>            <span class="hljs-keyword">if</span>(t &lt; <span class="hljs-number">0</span>) t = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> t = <span class="hljs-number">0</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">while</span>(C.size() &gt; <span class="hljs-number">1</span> &amp;&amp; C.get(C.size() - <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>)  C.remove(C.size() - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> C;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(List&lt;Integer&gt; A,List&lt;Integer&gt; B)</span>&#123;<br>        <span class="hljs-keyword">if</span>(A.size() != B.size()) <span class="hljs-keyword">return</span> A.size() &gt; B.size();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> A.size() - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>;i --)&#123;<br>            <span class="hljs-keyword">if</span>(A.get(i) != B.get(i)) &#123;<br>                <span class="hljs-keyword">return</span> A.get(i) &gt; B.get(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> in.next();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> in.next();<br>        List&lt;Integer&gt; A = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;Integer&gt; B = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> s1.length() - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>;i --) A.add(s1.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> s2.length() - <span class="hljs-number">1</span>;i  &gt;= <span class="hljs-number">0</span>; i --) B.add(s2.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>);<br>        <span class="hljs-keyword">if</span>(!cmp(A,B))&#123;<br>            System.out.print(<span class="hljs-string">&quot;-&quot;</span>);<br>        &#125;<br>        List&lt;Integer&gt; C = sub(A,B);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> C.size() - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>; i --)&#123;<br>            System.out.print(C.get(i));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="高精度乘低精度"><a href="#高精度乘低精度" class="headerlink" title="高精度乘低精度"></a>高精度乘低精度</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-comment">// C = A * b, A &gt;= 0, b &gt;= 0</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title function_">mul</span><span class="hljs-params">(List&lt;Integer&gt; A, <span class="hljs-type">int</span> B)</span><br>    &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        List&lt;Integer&gt; C = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; A.size();i++)<br>        &#123;<br>            t += A.get(i) * B;<br>            C.add(t % <span class="hljs-number">10</span>);<br>            t /= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(t != <span class="hljs-number">0</span>)<br>        &#123;<br>            C.add(t % <span class="hljs-number">10</span>);<br>            t /= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-comment">// 去除多余的前缀0</span><br>        <span class="hljs-keyword">while</span>(C.size() &gt; <span class="hljs-number">1</span> &amp;&amp; C.get(C.size() - <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) C.remove(C.size() - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> C;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> in.next();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">B</span> <span class="hljs-operator">=</span> in.nextInt();<br><br>        List&lt;Integer&gt; A = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> a.length() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) A.add(a.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>);<br>        List&lt;Integer&gt; C = mul(A, B);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> C.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) System.out.print((C.get(i)));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="高精度除以低精度"><a href="#高精度除以低精度" class="headerlink" title="高精度除以低精度"></a>高精度除以低精度</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-comment">// A / b = C ... r, A &gt;= 0, b &gt; 0</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title function_">div</span><span class="hljs-params">(List&lt;Integer&gt; A,<span class="hljs-type">int</span> b)</span>&#123;<br>        List&lt;Integer&gt; C = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> A.size() - <span class="hljs-number">1</span> ;i &gt;= <span class="hljs-number">0</span>; i --)&#123;<br>            r = r * <span class="hljs-number">10</span> + A.get(i);<br>            C.add(r / b);<br>            r %= b;<br>        &#125;<br>        Collections.reverse(C);<br>        <span class="hljs-keyword">while</span>(C.size() &gt; <span class="hljs-number">1</span> &amp;&amp; C.get(C.size() - <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) C.remove(C.size() - <span class="hljs-number">1</span>);<br><br>        C.add(r);<br>        <span class="hljs-keyword">return</span> C;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] arg)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> in.next();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> in.nextInt();<br>        List&lt;Integer&gt; A = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(a.length());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> a.length() - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>;i --) A.add(a.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>);<br>        List&lt;Integer&gt; C = div(A,b);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> C.size() - <span class="hljs-number">2</span>;i &gt;= <span class="hljs-number">0</span>;i --) System.out.print(C.get(i));<br><br>        System.out.println();<br>        System.out.print(C.get(C.size() - <span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo + GitHub搭建博客</title>
    <link href="/hello-world/"/>
    <url>/hello-world/</url>
    
    <content type="html"><![CDATA[<h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h4><p><a href="https://hexo.io/zh-cn/">Hexo</a>是一款快速、简洁且高效的博客框架，有如下特点：</p><ul><li><strong>超快速度</strong>：Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</li><li><strong>支持 Markdown</strong>：Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</li><li><strong>一键部署</strong>：只需一条指令即可部署到 GitHub Pages, Heroku 或其他平台。</li><li><strong>插件和可扩展性</strong>：强大的 API 带来无限的可能，与数种模板引擎（EJS，Pug，Nunjucks）和工具（Babel，PostCSS，Less/Sass）轻易集成。</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install hexo-cli -g<br>hexo init blog<br><span class="hljs-built_in">cd</span> blog<br>npm install<br>hexo server<br></code></pre></div></td></tr></table></figure><p>环境准备：Node.js, git, npm, nvm(非必须)。</p><p>操作文档参考：<a href="https://hexo.io/zh-cn/docs/">文档</a></p><p>官方收录主题：<a href="https://hexo.io/themes/">主题</a></p><p>本博客使用主题：<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a></p><p>一键部署：<a href="https://hexo.io/zh-cn/docs/one-command-deployment">部署</a></p><h4 id="Fluid主题"><a href="#Fluid主题" class="headerlink" title="Fluid主题"></a>Fluid主题</h4><p>官方手册：<a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a></p><h4 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h4><ol><li><p>进入博客站点文件夹，使用<code>cmd</code>命令执行：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">// hexo new [page] -p 文件保存路径 <span class="hljs-string">&quot;title&quot;</span><br>hexo new page --path Algorithm/Graph <span class="hljs-string">&quot;图论&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>在<code>站点目录\source\_posts</code>中生成的<code>xxx.md</code>文件里编辑文章内容。</p></li><li><p>[可选]执行下一步前，可先执行<code>hexo clean</code>，清空生成的文件夹<code>public</code></p></li><li><p>执行生成命令<code>hexo g</code>，将<code>*.md</code>转为静态文件<code>*.html</code>。</p></li><li><p>执行<code>hexo s</code>，启动本地服务，浏览器输入<code>localhost:4000</code>，查看生成效果。</p></li><li><p>执行部署命令<code>hexo d</code>，将新发布的文章部署到<code>github.io</code>上</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
